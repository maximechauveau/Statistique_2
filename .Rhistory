test <- data_all %>%
group_by(fighter) %>%
filter(date == max(date))
View(data)
data_all$Nb_total_combat <- data_all$wins + data_all$losses
data_all$wins <- as.numeric(data_all$wins)
data_all$losses <- as.numeric(data_all$losses)
data_all$dra <- as.numeric(data_all$draw)
data_all$Nb_total_combat <- data_all$wins + data_all$losses + data_all$draw
View(data_all)
data_all <- as.data.frame(data_all)
data_all$Nb_total_combat <- data_all$wins + data_all$losses + data_all$draw
data_all$Nb_total_combat <- data_all$wins + data_all$losses + data_all$draw
View(data)
data_all$draw <- as.numeric(data_all$draw)
data_all$dra <- as.numeric(data_all$draw)
data_all$wins <- as.numeric(data_all$wins)
data_all$losses <- as.numeric(data_all$losses)
data_all$draw <- as.numeric(data_all$draw)
data_all$Nb_total_combat <- data_all$wins + data_all$losses + data_all$draw
test <- data_all %>%
group_by(fighter) %>%
filter(Nb_total_combat == max(Nb_total_combat))
data_all <- data_all %>%
group_by(fighter) %>%
filter(Nb_total_combat == max(Nb_total_combat))
data <- read.csv2("./data/data.csv", header = TRUE, sep = ",")
data <- read.csv2("./data/data.csv", header = TRUE, sep = ",")
df_red <-  select(data,4,6,8,9, starts_with("R_"))
df_blue <-  select(data,4,6,8,9, starts_with("B_"))
nom_col <- sub("R_","",names(df_red))
names(df_blue) <- nom_col
names(df_red) <- nom_col
data_all <- rbind(df_red,df_blue)
data_all$wins <- as.numeric(data_all$wins)
data_all$losses <- as.numeric(data_all$losses)
data_all$draw <- as.numeric(data_all$draw)
data_all$Nb_total_combat <- data_all$wins + data_all$losses + data_all$draw
data_all <- data_all %>%
group_by(fighter) %>%
filter(Nb_total_combat == max(Nb_total_combat))
View(data_all)
data <- read.csv2("./data/data.csv", header = TRUE, sep = ",")
df_red <-  select(data,4,6,8,9, starts_with("R_"))
df_blue <-  select(data,4,6,8,9, starts_with("B_"))
nom_col <- sub("R_","",names(df_red))
names(df_blue) <- nom_col
names(df_red) <- nom_col
data_all <- rbind(df_red,df_blue)
data_all$wins <- as.numeric(data_all$wins)
data_all$losses <- as.numeric(data_all$losses)
data_all$draw <- as.numeric(data_all$draw)
data_all$Nb_total_combat <- data_all$wins + data_all$losses + data_all$draw
data_all_unique <- data_all %>%
group_by(fighter) %>%
filter(Nb_total_combat == max(Nb_total_combat))
with(data_all_unique, plot(Height_cms, Weight_lbs))
with(data_all_unique, qplot(Height_cms, Weight_lbs))
plot(x = data_all_unique$Height_cms, y = data_all_unique$Weight_lbs)
scatterplot(data_all_unique$Height_cms, data_all_unique$Weight_lbs)
library("car")
scatterplot(data_all_unique$Height_cms, data_all_unique$Weight_lbs)
data_all_unique$Weight_lbs <- as.numeric(data_all_unique$Weight_lbs)
data_all_unique$Height_cms <- as.numeric(data_all_unique$Height_cms)
plot(x = data_all_unique$Height_cms, y = data_all_unique$Weight_lbs)
scatterplot(data_all_unique$Height_cms, data_all_unique$Weight_lbs)
with(data_all_unique, qplot(Height_cms, Weight_lbs))
summary(data_all_unique)
cor(data_all_unique$Height_cms,data_all_unique$Weight_lbs)
lm(formula=Weight_lbs~Height_cms,data=data_all_unique)
lm(formula=Height_cms~Weight_lbs,data=data_all_unique)
resultat <- lm(formula=Height_cms~Weight_lbs,data=data_all_unique)
summary(resultat)
View(resultat)
resultat <- lm(formula=Weight_lbs~Height_cms,data=data_all_unique)
summary(resultat)
resultat$coefficients
plot(x = data_all_unique$Height_cms, y = data_all_unique$Weight_lbs)
res.lm <- lm(formula=Weight_lbs~Height_cms,data=data_all_unique)
summary(res.lm)
res.lm$coefficients
plot(x = data_all_unique$Height_cms, y = data_all_unique$Weight_lbs)
abline(a=res.lm$coefficients[1], b= res.lm$coefficients[2],col=2, lty=2, lwd=1.5)
rstud = rstudent(res.lm)
rstud
# graphique des résidus studentisés
plot(rstud,pch=20,ylab="Résidus studentisés",ylim=c(-3,3))
abline(h=c(0), col="grey",lty=1,lwd=2)
abline(h=c(-2,2), col="grey",lty=2,lwd=2)
res.qq=qqnorm(rstud, pch=20, ylim=c(-3,7),xlim=c(-3,3))
qqline(rstud, lty=2, lwd=2, col=2)
#Distance de cook
res.cook=cooks.distance(model=res.lm)
plot(res.cook, type="h",ylab="Distances de Cook", ylim=c(0,0.6))
abline(h=0.5,col="gray",lty=2)
res.qq=qqnorm(rstud, pch=20, ylim=c(-3,7),xlim=c(-3,3))
#Distance de cook
res.cook=cooks.distance(model=res.lm)
plot(res.cook, type="h",ylab="Distances de Cook", ylim=c(0,0.6))
View(data_all_unique)
cor(data_all_unique$Height_cms,data_all_unique$Weight_lbs)
res.lm <- lm(formula=Weight_lbs~Height_cms,data=data_all_unique)
summary(res.lm)
scatterplot(data_all_unique$Height_cms, data_all_unique$Weight_lbs)
plot(x = data_all_unique$Height_cms, y = data_all_unique$Weight_lbs)
with(data_all_unique, qplot(Height_cms, Weight_lbs))
data_all_unique <- load("./data/data_all_unique")
data_all_unique <- load("./data/combat_MMA.RData")
load("./data/combat_MMA.RData")
data_all_unique <- df
summary(data_all_unique)
cor(data_all_unique$Height_cms,data_all_unique$Weight_lbs)
res.lm <- lm(formula=Weight_lbs~Height_cms,data=data_all_unique)
summary(res.lm)
#Foncition cor permet de calculer la corrélation entre 2 variables
cor(data_all_unique$Height_cms,data_all_unique$Weight_lbs)
#Calcul du ratio de victoire
data_all_unique$ratio_win <- (100 * data_all_unique$wins)/data_all_unique$totalCombat
View(data_all_unique)
#Foncition cor permet de calculer la corrélation entre 2 variables
cor(data_all_unique$ratio_win,data_all_unique$avg_HEAD_att)
#Foncition cor permet de calculer la corrélation entre 2 variables
round(cor(data_all_unique$ratio_win,data_all_unique$avg_HEAD_att),2)
#Foncition cor permet de calculer la corrélation entre 2 variables
round(cor(data_all_unique$ratio_win,data_all_unique$avg_HEAD_att, use = "complete.obs"),2)
#Ratio_win vs avg_BODY_att
round(cor(data_all_unique$ratio_win,data_all_unique$avg_BODY_att, use = "complete.obs"),2)
#Ratio_win vs avg_BODY_landed
round(cor(data_all_unique$ratio_win,data_all_unique$avg_BODY_landed, use = "complete.obs"),2)
#Ratio_win vs avg_GROUND_landed
round(cor(data_all_unique$ratio_win,data_all_unique$avg_GROUND_landed, use = "complete.obs"),2)
#Régression linéaire multiple
res.lm <- lm(formula=ratio_win ~ avg_HEAD_landed + avg_BODY_landed + avg_GROUND_landed,data=data_all_unique)
#Régression linéaire multiple
res.lm_ratio_win <- lm(formula=ratio_win ~ avg_HEAD_landed + avg_BODY_landed + avg_GROUND_landed,data=data_all_unique)
summary(res.lm_ratio_win)
#Ratio_win vs avg_BODY_landed
round(cor(data_all_unique$ratio_win,data_all_unique$avg_BODY_landed, use = "complete.obs"),2)
#Foncition cor permet de calculer la corrélation entre 2 variables
#Ratio_win vs avg_HEAD_landed
round(cor(data_all_unique$ratio_win,data_all_unique$avg_HEAD_landed, use = "complete.obs"),2)
#Ratio_win vs avg_GROUND_landed
round(cor(data_all_unique$ratio_win,data_all_unique$avg_GROUND_landed, use = "complete.obs"),2)
#Régression linéaire multiple sans avg_BODY_landed
res.lm_ratio_win <- lm(formula=ratio_win ~ avg_HEAD_landed + avg_GROUND_landed,data=data_all_unique)
summary(res.lm_ratio_win)
# C - Vérification des hypothèses
# C1 - Valeurs ajustées / résidus studentisés (indépendance, structure de variance, points aberrants)
rstud_ratio_win = rstudent(res.lm_ratio_win)
plot(rstud_ratio_win, pch=20, ylab="Résidus studentisés", ylim = c(-3,3))
abline(h=c(0), col="grey",lty=1,lwd=2)
abline(h=c(-2,2), col="grey",lty=2,lwd=2)
install.packages("glvma")
install.packages("gvlma")
library("gvlma")
gvlma(res.lm_ratio_win)
res.anova <- aov(avg_TOTAL_STR_att ~ weight_class, data = data_all_unique)
summary(res.anova)
ggplot(data_all_unique,aes(x=weight_class,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Classe de combat")+
ylab("Coup tenté")
library("ggplot")
install.packages("ggplot2")
library("ggplot")
install.packages("ggplot2")
library("ggplot2")
ggplot(data_all_unique,aes(x=weight_class,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Classe de combat")+
ylab("Coup tenté")
#
anova_class <- lm(avg_TOTAL_STR_att~weight_class,data=data_all_unique)
summary(anova_variete)
summary(anova_class)
# tableau de l'analyse de la variance
anova(anova_class)
res.anova_head <- aov(avg_HEAD_att ~ weight_class, data = data_all_unique)
summary(res.anova_head)
#Graphique
ggplot(data_all_unique,aes(x=weight_class,y=avg_HEAD_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Classe de combat")+
ylab("Coup tenté")
#
anova_class_head <- lm(avg_HEAD_att~weight_class,data=data_all_unique)
summary(anova_class_head)
# tableau de l'analyse de la variance
anova(anova_class_head)
lm(avg_TOTAL_STR_att~weight_class,data=data_all_unique)
ggplot(data_all_unique,aes(x=stance,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Style de combat")+
ylab("Coup tenté")
ggplot(data_all_unique,aes(x=Stance,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Style de combat")+
ylab("Coup tenté")
#Calcul ANOVA
anova_class_style <- lm(avg_TOTAL_STR_att~weight_class + Stance,data=data_all_unique)
lm(avg_TOTAL_STR_att~weight_class + Stance,data=data_all_unique)
summary(anova_class_style)
# tableau de l'analyse de la variance
anova(anova_class_style)
table(data_all_unique$weight_class)
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Heavyweight", "Light Heavyweight"), "Poids Lourd Homme"]
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Heavyweight", "Light Heavyweight")] <-  "Poids Lourd Homme"
data_all_unique <- data_all_unique$categorie_poids
load("./data/combat_MMA.RData")
data_all_unique <- df
data_all_unique <- data_all_unique$categorie_poids
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Heavyweight", "Light Heavyweight")] <-  "Poids Lourd Homme"
View(data_all_unique)
load("./data/combat_MMA.RData")
data_all_unique <- df
View(data_all_unique)
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Heavyweight", "Light Heavyweight")] <-  "Poids Lourd Homme"
View(data_all_unique)
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Middleweight", "Welterweight")] <-  "Poids Moyens Homme"
View(data_all_unique)
table(data_all_unique$weight_class)
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Heavyweight", "Light Heavyweight")] <-  "Poids Lourds Homme"
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Middleweight", "Welterweight")] <-  "Poids Moyens Homme"
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Lightweight", "Featherweight")] <-  "Poids Legers Homme"
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Bantamweight", "Flyweight")] <-  "SuperLegers Homme"
#Catégorie poids
ggplot(data_all_unique,aes(x=Stance,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Catégorie poids")+
ylab("Coup tenté")
#Catégorie poids
ggplot(data_all_unique,aes(x=categorie_poids,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Catégorie poids")+
ylab("Coup tenté")
dffiltre <- data_all_unique %>% filter(!is.na(categoriePoids) & totalCombat >= 5)
library("dplyr")
dffiltre <- data_all_unique %>% filter(!is.na(categoriePoids) & totalCombat >= 5)
dffiltre <- data_all_unique %>% filter(!is.na(categorie_poids) & totalCombat >= 5)
View(dffiltre)
dffiltre <- data_all_unique %>% filter(!is.na(categorie_poids) & totalCombat >= 5 & !is.na(Stance))
table(dffiltre$Stance)
dffiltre <- dffiltre %>% filter(!is.na(Stance))
table(dffiltre$Stance)
dffiltre <- dffiltre %>% filter(Stance = "")
dffiltre <- dffiltre %>% filter(Stance == "")
table(dffiltre$Stance)
dffiltre <- data_all_unique %>% filter(!is.na(categorie_poids) & totalCombat >= 5)
dffiltre <- dffiltre %>% filter(Stance %in% c("Open Stance", "Orthodox", "Southpaw", "Switch"))
table(dffiltre$Stance)
dffiltre$Stance
dffiltre$Stance <- as.character(dffiltre$Stance)
table(dffiltre$Stance)
dffiltre$Stance <- as.factor(dffiltre$Stance)
dffiltre$Stance
table(dffiltre$Stance)
View(dffiltre)
#Style de combat
ggplot(data_all_unique,aes(x=Stance,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Style de combat")+
ylab("Coup tenté")
#Style de combat
ggplot(dffiltre,aes(x=Stance,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Style de combat")+
ylab("Coup tenté")
#Catégorie poids
ggplot(dffiltre,aes(x=categorie_poids,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Catégorie poids")+
ylab("Coup tenté")
#Calcul ANOVA
anova_class_style <- lm(avg_TOTAL_STR_att~categorie_poids + Stance,data=dffiltre)
lm(avg_TOTAL_STR_att~categorie_poids + Stance,data=dffiltre)
summary(anova_class_style)
#Calcul ANOVA avec FactoMineR
install.packages("FactoMineR")
library("FactoMineR")
res_aovsum <- AovSum(avg_TOTAL_STR_att~categorie_poids + Stance,data=dffiltre)
summary(res_aovsum)
anova(res_aovsum)
res_aovsum
anova_class_style
lm(avg_TOTAL_STR_att~categorie_poids + Stance,data=dffiltre)
summary(anova_class_style)
summary(res_aovsum)
res_aovsum
anova_class_style
summary(anova_class_style)
summary(res_aovsum)
res_aovsum
summary(anova_class_style)
View(data_all_unique)
#Calcul du ratio de victoire
data_all_unique$ratio_win <- (100 * data_all_unique$wins)/data_all_unique$totalCombat
#Foncition cor permet de calculer la corrélation entre 2 variables
#Ratio_win vs avg_HEAD_landed
round(cor(data_all_unique$ratio_win,data_all_unique$avg_HEAD_landed, use = "complete.obs"),2)
#Ratio_win vs avg_BODY_landed
round(cor(data_all_unique$ratio_win,data_all_unique$avg_BODY_landed, use = "complete.obs"),2)
#Ratio_win vs avg_GROUND_landed
round(cor(data_all_unique$ratio_win,data_all_unique$avg_GROUND_landed, use = "complete.obs"),2)
#Régression linéaire multiple
res.lm_ratio_win <- lm(formula=ratio_win ~ avg_HEAD_landed + avg_BODY_landed + avg_GROUND_landed,data=data_all_unique)
summary(res.lm_ratio_win)
#Régression linéaire multiple sans avg_BODY_landed
res.lm_ratio_win <- lm(formula=ratio_win ~ avg_HEAD_landed + avg_GROUND_landed,data=data_all_unique)
summary(res.lm_ratio_win)
# C - Vérification des hypothèses
# C1 - Valeurs ajustées / résidus studentisés (indépendance, structure de variance, points aberrants)
rstud_ratio_win <-  rstudent(res.lm_ratio_win)
plot(rstud_ratio_win, pch=20, ylab="Résidus studentisés", ylim = c(-3,3))
abline(h=c(0), col="grey",lty=1,lwd=2)
abline(h=c(-2,2), col="grey",lty=2,lwd=2)
install.packages("gvlma")
library("gvlma")
gvlma(res.lm_ratio_win)
library("gvlma")
gvlma(res.lm_ratio_win)
res.anova <- aov(avg_TOTAL_STR_att ~ weight_class, data = data_all_unique)
summary(res.anova)
#install.packages("ggplot2")
library("ggplot2")
#Graphique
ggplot(data_all_unique,aes(x=weight_class,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Classe de combat")+
ylab("Coup tenté")
#Calcul ANOVA
anova_class <- lm(avg_TOTAL_STR_att~weight_class,data=data_all_unique)
summary(anova_class)
# tableau de l'analyse de la variance
anova(anova_class)
res.anova_head <- aov(avg_HEAD_att ~ weight_class, data = data_all_unique)
summary(res.anova_head)
#Graphique
ggplot(data_all_unique,aes(x=weight_class,y=avg_HEAD_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Classe de combat")+
ylab("Coup tenté")
#
anova_class_head <- lm(avg_HEAD_att~weight_class,data=data_all_unique)
summary(anova_class_head)
# tableau de l'analyse de la variance
anova(anova_class_head)
table(data_all_unique$weight_class)
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Heavyweight", "Light Heavyweight")] <-  "Poids Lourds Homme"
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Middleweight", "Welterweight")] <-  "Poids Moyens Homme"
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Lightweight", "Featherweight")] <-  "Poids Legers Homme"
data_all_unique$categorie_poids[data_all_unique$weight_class %in% c("Bantamweight", "Flyweight")] <-  "SuperLegers Homme"
library("dplyr")
dffiltre <- data_all_unique %>% filter(!is.na(categorie_poids) & totalCombat >= 5)
dffiltre <- dffiltre %>% filter(Stance %in% c("Open Stance", "Orthodox", "Southpaw", "Switch"))
table(dffiltre$Stance)
dffiltre$Stance <- as.character(dffiltre$Stance)
dffiltre$Stance <- as.factor(dffiltre$Stance)
#Style de combat
ggplot(dffiltre,aes(x=Stance,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Style de combat")+
ylab("Coup tenté")
#Catégorie poids
ggplot(dffiltre,aes(x=categorie_poids,y=avg_TOTAL_STR_att))+
geom_boxplot()+
ggtitle("Boites à moustaches")+
xlab("Catégorie poids")+
ylab("Coup tenté")
#Calcul ANOVA
anova_class_style <- lm(avg_TOTAL_STR_att~categorie_poids + Stance,data=dffiltre)
lm(avg_TOTAL_STR_att~categorie_poids + Stance,data=dffiltre)
summary(anova_class_style)
#Calcul ANOVA avec FactoMineR
install.packages("FactoMineR")
library("FactoMineR")
#Calcul ANOVA avec FactoMineR
#install.packages("FactoMineR")
library("FactoMineR")
res_aovsum <- AovSum(avg_TOTAL_STR_att~categorie_poids + Stance,data=dffiltre)
summary(res_aovsum)
anova(res_aovsum)
df$colonne <- relevel(df$colonne, ref = "modalité3")
# tableau de l'analyse de la variance
anova(anova_class_style)
# tableau de l'analyse de la variance
anova(anova_class_style)
### Vendredi 31 janvier 2020 ###
#Prédire le nombre de victoire / nombre de match  en fonction :
#Prédire le nombre de victoire / nombre de match  en fonction :
# de la catégorie de poids
View(dffiltre)
res_ancova <- lm(ratio_win ~ categorie_poids + avg_TOTAL_STR_landed, data = dffiltre)
res_ancova
install.packages("glmulti")
library("glmulti")
cor(dffiltre, use = "complete.obs")
dfquanti <- select_if(dffiltre, is.numeric)
View(dfquanti)
cor(dffiltre, use = "complete.obs")
dfquanti <- select(-dfquanti$fighter)
dfquanti <- select(-fighter)
dfquanti <- select(-dfquanti.fighter)
dfquanti <- select(-(dfquanti$fighter)
dfquanti <- select(-(dfquanti$fighter))
View(dfquanti)
dfquanti <- select(-1)
dfquanti %>%  select(-1)
View(dfquanti)
dfquanti <- dfquanti %>%  select(-1)
View(dfquanti)
dfquanti <- dfquanti[,-1]
View(dfquanti)
cor(dffiltre, use = "complete.obs")
cor(dfquanti, use = "complete.obs")
matrice_correaltion <- cor(dfquanti, use = "complete.obs")
View(matrice_correaltion)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
rcorr(as.matrix(dfquanti))
matrice_correlation <- rcorr(as.matrix(dfquanti))
#Corrélogramme : visualisation d’une matrice de corrélation
symnum(matrice_correlation, abbr.colnames=FALSE)
#Corrélogramme : visualisation d’une matrice de corrélation
symnum(as.numeric(matrice_correlation), abbr.colnames=FALSE)
?matrice_correlation
class(matrice_correlation)
matrice_correlation <- as.data.frame(matrice_correlation)
View(matrice_correlation)
View(matrice_correlation)
View(matrice_correaltion)
symnum(matrice_correaltion, abbr.colnames=FALSE)
test <- symnum(matrice_correaltion, abbr.colnames=FALSE)
test <- symnum(mcor, abbr.colnames=FALSE)
test <- symnum(rcorr(as.matrix(dfquanti)), abbr.colnames=FALSE)
test <- symnum(matrice_correlation, abbr.colnames=FALSE)
rquery.cormat(dfquanti)
install.packages("corrplot")
library(corrplot)
rquery.cormat(dfquanti)
library(corrplot)
rquery.cormat(dfquanti)
rquery.cormat(dfquanti)
rcorr(as.matrix(dfquanti))
#Création matrice de corrélation entre toutes les variables
matrice_correlation <- rcorr(as.matrix(dfquanti))
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
View(flattenCorrMatrix)
View(matrice_correlation)
flattenCorrMatrix(matrice_correaltion$r, matrice_correaltion$P)
cor(dfquanti, use = "complete.obs")
corrplot(matrice_correaltion)
class(matrice_correaltion)
View(matrice_correaltion)
library(corrplot)
matrice<-cor(dfquanti, use = "complete.obs")
head(df)
toto<-data.frame(matrix(data=NA,nrow=0 , ncol=3))
head(dfquanti)
toto<-data.frame(matrix(data=NA,nrow=0 , ncol=3))
for(i in 1:dim(matrice)[1]){
for(j in 1:dim(matrice)[2]){
toto=rbind(toto,data.frame( var1 = colnames(matrice)[i] , var2 = rownames(matrice)[j] , corr = matrice[i,j]))
}
}
View(toto)
toto[toto$corr> 0.5,]
toto <- filter(!is.na(toto))
toto <- filter(!is.na(corr))
toto <- filter(!is.na(toto$corr))
toto %>%  filter(!is.na(toto$corr))
toto <- toto %>%  filter(!is.na(toto$corr))
toto[toto$corr> 0.5,]
toto[toto$corr> 0.6,]
toto[toto$corr> 0.7,]
toto[toto$corr> 0.9,]
toto[, "corr"]
toto[toto$corr> 0.9,]
toto <- toto %>%  filter(toto$corr = 1)
toto <- toto %>%  filter(toto$corr = 1.0000000)
toto <- toto %>%  filter(toto$corr == 1.0000000)
matrice<-cor(dfquanti, use = "complete.obs")
head(dfquanti)
toto<-data.frame(matrix(data=NA,nrow=0 , ncol=3))
for(i in 1:dim(matrice)[1]){
for(j in 1:dim(matrice)[2]){
toto=rbind(toto,data.frame( var1 = colnames(matrice)[i] , var2 = rownames(matrice)[j] , corr = matrice[i,j]))
}
}
toto <- toto %>%  filter(toto$corr != 1.0000000)
toto <- toto %>%  filter(toto$corr != 1.0000000 & !is.na(toto$corr))
